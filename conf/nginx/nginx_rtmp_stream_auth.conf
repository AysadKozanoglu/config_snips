# author: Aysad Kozanoglu
# ALL in ONE config file
# change your token password on section server > /auth{}
#
# nginx configure arguments:
# --sbin-path=/usr/local/sbin --user=www-data --group=www-data --with-stream --with-threads --with-file-aio --add-module=nginx-rtmp-module-dev
# rtmp module:
# https://github.com/AysadKozanoglu/nginx-rtmp-module

worker_processes auto;
worker_rlimit_nofile 100000;



events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optmized to serve many clients with each thread, essential for linux
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
    accept_mutex on;
    accept_mutex_delay 500ms;

}



thread_pool default threads=16 max_queue=65536;

rtmp_auto_push on;

rtmp {

    server {

        listen 1935;
notify_method get;
        chunk_size 4000;

        # TV mode: one publisher, many subscribers
        application mytv {

            # enable live streaming
            live on;

            # record first 1K of stream
            record all;
            record_path /tmp/av;
            record_max_size 1K;

            # append current timestamp to each flv
            record_unique on;

            # publish only from localhost
            allow publish 127.0.0.1;
            deny publish all;

            #allow play all;
        }




        # Many publishers, many subscribers
        # no checks, no recording
        application video {

            live on;

            # The following notifications receive all
            # the session variables as well as
            # particular call arguments in HTTP POST
            # request

            # Make HTTP request & use HTTP retcode
            # to decide whether to allow publishing
            # from this connection or not
            on_publish http://localhost:80/publish;

            # Same with playing
            on_play http://localhost:80/play;

            # Publish/play end (repeats on disconnect)
            on_done http://localhost:80/done;

            # All above mentioned notifications receive
            # standard connect() arguments as well as
            # play/publish ones. If any arguments are sent
            # with GET-style syntax to play & publish
            # these are also included.
            # Example URL:
            #   rtmp://localhost/myapp/mystream?a=b&c=d

            # record 10 video keyframes (no audio) every 2 minutes
            record keyframes;
            record_path /tmp/vc;
            record_max_frames 10;
            record_interval 2m;

            # Async notify about an flv recorded
            on_record_done http://localhost:80/record_done;

        }


        # HLS

        # For HLS to work please create a directory in tmpfs (/tmp/hls here)
        # for the fragments. The directory contents is served via HTTP (see
        # http{} section in config)
        #
        # Incoming stream must be in H264/AAC. For iPhones use baseline H264
        # profile (see ffmpeg example).
        # This example creates RTMP stream from movie ready for HLS:
        #
        # ffmpeg -loglevel verbose -re -i movie.avi  -vcodec libx264
        #    -vprofile baseline -acodec libmp3lame -ar 44100 -ac 1
        #    -f flv rtmp://localhost:1935/hls/movie
        #
        # If you need to transcode live stream use 'exec' feature.
        #


        application hls {
            live on;
            hls on;

      on_publish http://localhost/auth;
      on_play http://localhost/auth;

            hls_path /tmp/hls;
            hls_fragment 3;
            hls_playlist_length 10;
            # disable consuming the stream from nginx as rtmp
            deny play all;

        }

        # MPEG-DASH is similar to HLS

        application dash {
            live on;
            dash on;
            dash_path /tmp/dash;
        }
    }
}

# HTTP can be used for accessing RTMP stats
http {

    sendfile off;
    tcp_nopush on;
    aio threads=default;
    directio 512;
    default_type application/octet-stream;

 # directio 4m;


    server {

        listen      80;

	location /web{
		root /usr/local/nginx/html;
	}

        # This URL provides RTMP statistics in XML
        location /stat {
            rtmp_stat all;

            # Use this stylesheet to view XML as web page
            # in browser
            rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
            # XML stylesheet to view RTMP stats.
            # Copy stat.xsl wherever you want
            # and put the full directory path here
            root /usr/local/nginx/html/stat.xsl;
        }


# you can include the auth section  to generate logins in live e.g. include <path>/authlogins.conf
# and reload nginx in live nginx -s reload

  location /auth {
  if ($arg_token = 'PASSWORD') {
    return 201;
  }
  return 404;
}

        location /hls {
            # Serve HLS fragments

        # Disable cache
        add_header Cache-Control no-cache;

#        # CORS setup
#        add_header 'Access-Control-Allow-Origin' '*' always;
#        add_header 'Access-Control-Expose-Headers' 'Content-Length';
#
#        # allow CORS preflight requests
#        if ($request_method = 'OPTIONS') {
#            add_header 'Access-Control-Allow-Origin' '*';
#            add_header 'Access-Control-Max-Age' 1728000;
#            add_header 'Content-Type' 'text/plain charset=UTF-8';
#            add_header 'Content-Length' 0;
#            return 204;
#        }
#

            types {
                application/vnd.apple.mpegurl m3u8;
                video/mp2t ts;
            }
            root /tmp;
            add_header Cache-Control no-cache;
        }

        location /dash {
            # Serve DASH fragments
            root /tmp;
            add_header Cache-Control no-cache;
        }

	location /canli {
   		root /tmp;
	}
    }
}
