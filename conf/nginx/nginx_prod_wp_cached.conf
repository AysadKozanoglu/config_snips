worker_processes 2;
worker_rlimit_nofile 100000;



events {
    # determines how much clients will be served per worker
    # max clients = worker_connections * worker_processes
    # max clients is also limited by the number of socket connections available on the system (~64k)
    worker_connections 4000;

    # optmized to serve many clients with each thread, essential for linux
    use epoll;

    # accept as many connections as possible, may flood worker connections if set too low
    multi_accept on;
}



http {

	open_file_cache          max=2000 inactive=180s;
	open_file_cache_valid    60s;
	open_file_cache_min_uses 5;
	open_file_cache_errors   off;

    	limit_req_zone $binary_remote_addr zone=login:10m rate=130r/s;
    	fastcgi_cache_path /var/run/nginx-cache levels=1:2 keys_zone=WORDPRESS:300m inactive=60m;
    	fastcgi_cache_key "$scheme$request_method$host$request_uri";

	server_names_hash_bucket_size 64;

	include       mime.types;
	default_type  application/octet-stream;
	server_tokens off;

        add_header X-Frame-Options SAMEORIGIN;
	add_header Strict-Transport-Security "max-age=31536000";	
	client_max_body_size 2M;
	# cache informations about FDs, frequently accessed files
	# can boost performance, but you need to test those values

	# copies data between one FD and other from within the kernel
	# faster then read() + write()
	sendfile on;

	# send headers in one peace, its better then sending them one by one 
	tcp_nopush on;

	# don't buffer data sent, good for small data bursts in real time
	tcp_nodelay on;

	# server will close connection after this time
	keepalive_timeout 30;

	# number of requests client can make over keep-alive -- for testing
	keepalive_requests 100000;

	# allow the server to close connection on non responding client, this will free up memory
	reset_timedout_connection on;

	# request timed out -- default 60
	client_body_timeout 10;

	# if client stop responding, free up memory -- default 60
	send_timeout 2;


    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;


gzip on; 
gzip_disable "msie6"; 
gzip_vary on; 
gzip_proxied any; 
gzip_comp_level 6; 
gzip_min_length 1100; 
gzip_buffers 16 8k; 
gzip_http_version 1.1; 
gzip_types
    text/plain
    text/css
    text/js
    text/xml
    text/javascript
    application/javascript
    application/x-javascript
    application/json
    application/xml
    application/rss+xml
    image/svg+xml;
    

    charset utf-8;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;


	server {
	    listen              443 ssl;
	    server_name         planesium.de www.planesium.de;

	    ssl_certificate     /etc/ssl/nginx/planesium/planesium_bundle.crt;
	    ssl_certificate_key /etc/ssl/nginx/planesium/planesium.key;
	    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
	    ssl_ciphers         HIGH:!aNULL:!MD5;

    	   # Fix 'The Logjam Attack'.
	   # ssl_ciphers EECDH+AESGCM:EDH+AESGCM:AES256+EECDH:AES256+EDH;
    	   # ssl_prefer_server_ciphers on;
    	    ssl_dhparam /etc/ssl/dh2048_param.pem;

	    root /usr/local/nginx/html/planesiumde;

        location / {
        #    root   html;
            limit_req zone=login burst=5;
	    try_files $uri $uri/ /index.php?$args;
            index  index.php index.html index.htm;
        }


	# Media: images, icons, video, audio, HTC
	location ~* \.(?:jpg|js|pdf|css|jpeg|gif|png|ico|cur|gz|svg|svgz|mp4|ogg|ogv|webm|htc)$ {
	  expires 365d;
	  access_log off;
          log_not_found off;
	  add_header Cache-Control "public";
	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

        error_page   500 502 503 504  /50x.html;


        location ~ \.php$ {
                        try_files $uri =404;
                        fastcgi_index index.php;
                        fastcgi_pass unix:/var/run/php5-fpm.sock;
                        include fastcgi_params;
                        fastcgi_keep_conn on;
                        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
#        		fastcgi_cache_bypass $skip_cache;
#        		fastcgi_no_cache $skip_cache;
        		fastcgi_cache WORDPRESS;
        		fastcgi_cache_valid  60m;

                }


	}


    server {
        listen       8080;
        server_name  planesium.planesium.de planesium.ipnx.de s.planesium.de;
        root /usr/local/nginx/html;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
        #    root   html;
            limit_req zone=login burst=5;
            index  index.php index.html index.htm;
        }

    }	
    server {
        listen       80;
        server_name  planesium.de www.planesium.de;
        root /usr/local/nginx/html/planesiumde;
        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location / {
        #    root   html;
 	    limit_req zone=login burst=5;
            index  index.php index.html index.htm;
        }

	location /server_status {
    		stub_status;
	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
        error_page   500 502 503 504  /50x.html;
	

 	location ~ \.php$ {
                        try_files $uri =404;
                        fastcgi_index index.php;
                        fastcgi_pass unix:/var/run/php5-fpm.sock;
		        fastcgi_buffer_size 128k;
            		fastcgi_buffers 256 16k;
            		fastcgi_busy_buffers_size 256k;
            		fastcgi_temp_file_write_size 256k;
                        include fastcgi_params;
                        fastcgi_keep_conn on;
                        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
                        fastcgi_param SCRIPT_NAME $fastcgi_script_name;
                }

    }

}

